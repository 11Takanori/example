(define (make-queue)
  (let ((front-ptr '())
        (rear-ptr '()))
    (define (set-front-ptr! item) (set! front-ptr item))
    (define (set-rear-ptr! item) (set! rear-ptr item))
    (define (empty-queue?) (null? front-ptr))
    (define (insert-queue! item)
      (let ((new-pair (cons item '())))
        (cond ((empty-queue? new-pair)
              (set-front-ptr! new-pair)
              (set-rear-ptr! new-pair)
              front-ptr)
            (else
              (set-cdr! rear-ptr new-pair)
              (set-rear-ptr! new-pair)
              front-ptr))))
    (define (delete-queue!)
      (cond ((empty-queue?)
              (error "DELETE called with an empty queeu"))
            (else
              (set-front-ptr! (cdr front-ptr)))))
    (define (front-queue)
      (if (empty-queue?)
          (error "FRONT called with an empty queue")
          (car front-ptr)))
    (define (rear-queue)
      (if (empty-queue?)
          (error "REAE called with an empty queue")
          (car rear-ptr)))
    (define (dispath m)
      (cond ((eq? m 'insert-queue!) insert-queue!)
            ((eq? m 'delete-queue!) delete-queue!)
            ((eq? m 'front-queue) front-queue)
            ((eq? m 'rear-queue) rear-queue)))
    dispath))


(define q (make-queue))

((q 'insert-queue!) 'a)
((q 'insert-queue!) 'b)
((q 'insert-queue!) 'c)
((q 'delete-queue!))
((q 'insert-queue!) 'd)
((q 'front-queue))
((q 'rear-queue))
