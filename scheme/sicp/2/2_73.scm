(define (deriv exp var)
  (cond ((number? exp) 0)
        ((variable? exp) (if (same-variable? exp var) 1 0))
        (else ((get 'deriv (operator exp)) (operands exp) var))))

(define (operator exp) (car exp))

(define (operands exp) (cdr exp))

(define (install-sum-package)
  (define (sum-deriv expr var)
      (make-sum (deriv (addend expr) var)
                (deriv (augend expr) var)))
  (define (addend expr) (car expr))
  (define (augend expr) (cadr expr))
  (define (make-sum x1 x2)
      (cond ((=number? x1 0) x2)
            ((=number? x2 0) x1)
            (else (list '+ x1 x2))))
  (define (mul-deriv expr var)
    (make-sum (make-product (multiplier expr)
                            (deriv (multiplicand expr) var))
              (make-product (multiplicand expr)
                            (deriv (multiplier expr) var))))
  (define (multiplier expr) (car expr))
  (define (multiplicand expr) (cadr expr))
  (define (make-product x1 x2)
    (cond ((=number? x1 1) x2)
          ((=number? x2 1) x1)
          ((or (=number? xq 0) (=number? x2 0)) 0)
          ((and (number? x1) (number? x2)) (* x1 x2))
          (else (list '* x1 x2)))))
