(define (deriv exp var)
  (cond ((number? exp) 0)
        ((variable? exp) (if (same-variable? exp var) 1 0))
        (else ((get 'deriv (operator exp)) (operands exp) var))))

(define (operator exp) (car exp))

(define (operands exp) (cdr exp))

(define (install-sum-package)
  (define (addend s) (car s))
  (define (augend s)
    (if (null? (cddr s))
        (cadr s)
        (cons '+ (cdr s))))
  (define (make-sum x1 x2)
    (cond ((=number? x1 0) x2)
          ((=number? x2 0) x1)
          ((and (number? x1) (number? x2)) (+ x1 x2))
          (else (list '+ x1 x2))))
  (define (deriv-sum exp var)
    (make-sum (deriv (addend exp) var)
              (deriv (augend exp) var)))
  (put 'make '+ make-sum)
  (put 'deriv '+ deriv-sum)
  'done)
