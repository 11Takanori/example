(define (deriv exp var)
  (cond ((number? exp) 0)
        ((variable? exp) (if (same-variable? exp var) 1 0))
        (else ((get 'deriv (operator exp)) (operands exp) var))))

(define (operator exp) (car exp))

(define (operands exp) (cdr exp))

(define (=number? exp num)
  (and (number? exp) (= exp num)))

(define (install-sum-package)
  (define (addend s) (car s))
  (define (augend s)
    (if (null? (cddr s))
        (cadr s)
        (cons '+ (cdr s))))
  (define (make-sum x1 x2)
    (cond ((=number? x1 0) x2)
          ((=number? x2 0) x1)
          ((and (number? x1) (number? x2)) (+ x1 x2))
          (else (list '+ x1 x2))))
  (define (deriv-sum exp var)
    (make-sum (deriv (addend exp) var)
              (deriv (augend exp) var)))
  (put 'make '+ make-sum)
  (put 'deriv '+ deriv-sum)
  'done)

(define (install-product-package)
  (define (multiplier p) (car p))
  (define (multiplicand p)
    (if (null? (cddr p))
        (cadr p)
        (cons '* (cdr p))))
  (define (make-product x1 x2)
    (cond ((or (=number? x1 0) (=number? x2 0)) 0)
          ((=number? x1 1) x2)
          ((=number? x2 1) x1)
          ((and (number? x1) (number? x2)) (* x1 x2))
          (else (list '* x1 x2))))
  (define (deriv-product exp var)
    ((get 'make '+)
      (make-product (multiplier exp)
                    (deriv (multiplicand exp) var))
      (make-product (deriv (multiplier exp) var)
                    (multiplicand exp))))
    (put 'make '* make-product)
    (put 'deriv '* deriv-product)
    'done)

(define (install-exponent-package)
  (define (base x) (car s))
  (define (exponent s) (cadr s))
  (define (make-exponentiation b e)
    (cond ((=number? e 0) 1)
          ((=number? e 1) b)
          (else (list '** b e))))
  (define (deriv-exponentation exp var)
    (let ((make-p (get 'make '*)))
         (make-p
           (make-p
             (exponent exp)
             (make-exponentiation (base exp) (- (exponent exp) 1)))
            (deriv (base exp) var))))
  (put 'make '** make-exponentiation)
  (put 'deriv '** deriv-exponentation)
  'done)
